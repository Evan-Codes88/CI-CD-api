name: Deploy to Elastic Beanstalk

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 14 * * *" # Midnight AEST (14:00 UTC)
  workflow_dispatch:

jobs:
  test:
    uses: ./.github/workflows/ci.yml

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check for new commits (Scheduled Only)
        if: github.event_name == 'schedule'
        id: check-changes
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_COMMIT=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/commits/main | jq -r '.sha')
          aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/last-deployed-commit.txt last-deployed-commit.txt --region ap-southeast-2 || echo "No previous deploy commit found"
          LAST_DEPLOYED_COMMIT=$(cat last-deployed-commit.txt 2>/dev/null || echo "")
          echo "has-changes=$( [ \"$LATEST_COMMIT\" != \"$LAST_DEPLOYED_COMMIT\" ] && echo true || echo false )" >> "$GITHUB_OUTPUT"


      - name: Checkout repository
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18.20.4"

      - name: Install dependencies
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        run: npm install || echo "Install failed, continuing"

      - name: Validate package.json
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        run: jq -e '.type == "module"' package.json || { echo "'type': 'module' missing in package.json"; exit 1; }

      - name: Create deployment package (includes middleware)
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        run: |
          zip -r application.zip index.js package.json package-lock.json utils routes middleware .ebextensions || echo "Zipping failed"
          unzip -l application.zip | grep utils/connectDB.js || { echo "Missing: utils/connectDB.js"; exit 1; }
          unzip -l application.zip | grep .ebextensions/node-version.config || { echo "Missing: .ebextensions/node-version.config"; exit 1; }

      - name: Debug AWS setup
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws --version
          aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/ --region ap-southeast-2 || echo "S3 list failed"
          aws elasticbeanstalk describe-environments --region ap-southeast-2 --environment-names devapi-env || echo "Describe environments failed"

      - name: Upload and Deploy to Elastic Beanstalk
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp application.zip s3://${{ secrets.S3_BUCKET_NAME }}/application-${{ github.sha }}.zip --region ap-southeast-2
          aws elasticbeanstalk create-application-version \
            --region ap-southeast-2 \
            --application-name "DEV API" \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket=${{ secrets.S3_BUCKET_NAME }},S3Key=application-${{ github.sha }}.zip
          aws elasticbeanstalk update-environment \
            --region ap-southeast-2 \
            --environment-name devapi-env \
            --version-label ${{ github.sha }}

      - name: Verify environment health
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        id: verify-health
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          sleep 120
          HEALTH=$(aws elasticbeanstalk describe-environment-health \
            --region ap-southeast-2 \
            --environment-name devapi-env \
            --attribute-names HealthStatus Causes)
          echo "Environment health: $(echo $HEALTH | jq -r '.HealthStatus')"
          echo "Causes: $(echo $HEALTH | jq -r '.Causes[]?')"
          [[ "$(echo $HEALTH | jq -r '.HealthStatus')" == "Ok" ]] || exit 1

      - name: Verify Node.js version
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          NODE_VERSION=$(aws elasticbeanstalk describe-configuration-settings \
            --region ap-southeast-2 \
            --application-name "DEV API" \
            --environment-name devapi-env \
            --query 'ConfigurationSettings[0].OptionSettings[?OptionName==`NodeVersion`].Value' --output text)
          echo "Node.js version in environment: $NODE_VERSION"
          [[ "$NODE_VERSION" == 18* ]] || exit 1

      - name: Verify environment variables
        if: github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          VARS=$(aws elasticbeanstalk describe-configuration-settings \
            --region ap-southeast-2 \
            --application-name "DEV API" \
            --environment-name devapi-env \
            --query 'ConfigurationSettings[0].OptionSettings[?Namespace==`aws:elasticbeanstalk:application:environment`]')
          echo "$VARS" | jq -e '.[] | select(.OptionName=="MONGODB_URI")' || exit 1
          echo "$VARS" | jq -e '.[] | select(.OptionName=="NODE_ENV")' || exit 1

      - name: Retrieve logs on failure
        if: failure() && (github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true')
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws elasticbeanstalk request-environment-info \
            --region ap-southeast-2 \
            --environment-name devapi-env \
            --info-type tail
          sleep 10
          LOG_URL=$(aws elasticbeanstalk retrieve-environment-info \
            --region ap-southeast-2 \
            --environment-name devapi-env \
            --info-type tail --query 'EnvironmentInfo[].Message' --output text)
          curl -s "$LOG_URL" || echo "Log download failed"

      - name: Save last deployed commit SHA
        if: always() && (github.event_name != 'schedule' || steps.check-changes.outputs.has-changes == 'true')
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "${{ github.sha }}" > last-deployed-commit.txt
          aws s3 cp last-deployed-commit.txt s3://${{ secrets.S3_BUCKET_NAME }}/last-deployed-commit.txt --region ap-southeast-2 || echo "Failed to update commit SHA"
