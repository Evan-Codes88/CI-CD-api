# Workflow name for deploying to AWS Elastic Beanstalk
name: Deploy to Elastic Beanstalk

# Events that trigger the workflow
on:
  push:
    branches: [main]
  schedule:
    - cron: "0 14 * * *" # Midnight AEST (14:00 UTC)
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    uses: ./.github/workflows/ci.yml

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check for new commits
        if: github.event_name == 'schedule'
        id: check-changes
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_COMMIT=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/commits/main | jq -r '.sha')
          echo "Latest commit: $LATEST_COMMIT"
          aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/last-deployed-commit.txt last-deployed-commit.txt --region ap-southeast-2 || echo "No previous deploy commit found"
          if [ -f last-deployed-commit.txt ]; then
            LAST_DEPLOYED_COMMIT=$(cat last-deployed-commit.txt)
            echo "Last deployed commit: $LAST_DEPLOYED_COMMIT"
          else
            LAST_DEPLOYED_COMMIT=""
          fi
          if [ "$LATEST_COMMIT" != "$LAST_DEPLOYED_COMMIT" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@v4
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true'

      - name: Use Node.js
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18.20.4"

      - name: Install dependencies
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true'
        run: npm install || echo "Install dependencies failed, but continuing"

      - name: Create deployment package
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true'
        run: |
          zip -r application.zip src index.js package.json package-lock.json utils .ebextensions || echo "Create deployment package failed, but continuing"
          unzip -l application.zip | grep utils/connectDB.js || { echo "utils/connectDB.js missing in application.zip"; exit 1; }

      - name: Debug AWS setup
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws --version
          aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/ --region ap-southeast-2 || echo "Failed to list S3 bucket"
          aws elasticbeanstalk describe-environments --region ap-southeast-2 --environment-names devapi-env || echo "Failed to describe Elastic Beanstalk environment"

      - name: Deploy to Elastic Beanstalk
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp application.zip s3://${{ secrets.S3_BUCKET_NAME }}/application-${{ github.sha }}.zip --region ap-southeast-2 || echo "Failed to upload application.zip to S3"
          aws elasticbeanstalk create-application-version \
            --region ap-southeast-2 \
            --application-name "DEV API" \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket=${{ secrets.S3_BUCKET_NAME }},S3Key=application-${{ github.sha }}.zip || echo "Failed to create application version"
          aws elasticbeanstalk update-environment \
            --region ap-southeast-2 \
            --environment-name devapi-env \
            --version-label ${{ github.sha }} || echo "Failed to update Elastic Beanstalk environment"

      - name: Verify environment health
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true'
        id: verify-health
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          sleep 60
          HEALTH=$(aws elasticbeanstalk describe-environment-health \
            --region ap-southeast-2 \
            --environment-name devapi-env \
            --attribute-names HealthStatus Causes --output json)
          HEALTH_STATUS=$(echo $HEALTH | jq -r '.HealthStatus')
          CAUSES=$(echo $HEALTH | jq -r '.Causes[]')
          echo "Environment health: $HEALTH_STATUS"
          echo "Causes: $CAUSES"
          echo "health-status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          if [ "$HEALTH_STATUS" != "Ok" ]; then
            echo "Environment is not healthy ($HEALTH_STATUS). Causes: $CAUSES"
            exit 1
          fi

      - name: Verify Node.js version
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          NODE_VERSION=$(aws elasticbeanstalk describe-configuration-settings \
            --region ap-southeast-2 \
            --application-name "DEV API" \
            --environment-name devapi-env \
            --query 'ConfigurationSettings[0].OptionSettings[?OptionName==`NodeVersion`].Value' --output text)
          echo "Node.js version in environment: $NODE_VERSION"
          if [[ "$NODE_VERSION" != "18"* ]]; then
            echo "Node.js version mismatch. Expected 18.x, got $NODE_VERSION"
            exit 1
          fi

      - name: Retrieve logs on failure
        if: failure() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true')
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws elasticbeanstalk request-environment-info \
            --region ap-southeast-2 \
            --environment-name devapi-env \
            --info-type tail
          sleep 10
          aws elasticbeanstalk retrieve-environment-info \
            --region ap-southeast-2 \
            --environment-name devapi-env \
            --info-type tail --query 'EnvironmentInfo[].Message' --output text || echo "Failed to retrieve logs"

      - name: Save last deployed commit SHA
        if: always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || steps.check-changes.outputs.has-changes == 'true')
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "${{ github.sha }}" > last-deployed-commit.txt
          aws s3 cp last-deployed-commit.txt s3://${{ secrets.S3_BUCKET_NAME }}/last-deployed-commit.txt --region ap-southeast-2 || echo "Failed to save last deployed commit SHA"
